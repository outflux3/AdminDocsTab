<?php

/**
 *
 * Copyright [year] by [your name]
 *
 *
 * ProcessWire 2.x
 * Copyright (C) 2012 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 */

class ProcessDocsView extends Process {

	/**
	 * Return information about this module (required)
	 *
	 */
	public static function getModuleInfo() {
		return array(

			// Your module's title
			'title' => 'Docs View',

			// A 1 sentence description of what your module does
			'summary' => 'Shows documentation pages in a single accordion view.',

			// Module version number: use 1 for 0.0.1 or 100 for 1.0.0, and so on
			'version' => 1,

			// Name of person who created this module (change to your name)
			'author' => 'Macrura',

			// URL to more info: change to your full modules.processwire.com URL (if available), or something else if you prefer
			'href' => 'http://modules.processwire.com/',

			// name of permission required of users to execute this Process (optional)
			'permission' => 'page-edit',

			);
	}

	/**
	 * The name that will be used for the page this module creates
	 *
	 * It should be unique and the same (or similar) to the module name, but all lowercase.
	 * It should not be the same as any other ProcessWire admin page name.
	 *
	 */
	const pageName = 'documentation';

	/**
	 * This is an optional initialization function called before any execute functions.
	 *
	 */
	public function init() {
		parent::init(); // required
	}

	/**
	 * This function is executed when a page with your Process assigned is accessed.
 	 *
	 * This can be seen as your main or index function. You'll probably want to replace
	 * everything in this function.
	 *
	 */
	public function ___execute() {

		$mainClass = 'AdminDocsTab';
		$user = wire('user');
		$config = wire('config');

		$data = wire('modules')->getModuleConfigData($mainClass);
		$docsRootID = (int) $data['docsRoot'];
		$docsRoot = wire('pages')->get($docsRootID);

		$this->config->styles->add($this->config->urls->siteModules . $mainClass . '/' . $mainClass . '.css?v=' . time());
		$this->config->scripts->add($this->config->urls->siteModules . $mainClass . '/jquery.cbpNTAccordion.min.js');


		$out ="<div id='docs'><ul id='cbp-ntaccordion' class='cbp-ntaccordion'>";

		foreach($docsRoot->children as $doc) {

			$out .= "<li>
					<h3 class='cbp-nttrigger'>{$doc->title}</h3>
					<div class='cbp-ntcontent'>
					{$doc->body}";

			if($user->hasRole('superuser')) {
				$out .=
					"<div style='float:right;font-size:11px;'>
						<a href='{$config->urls->admin}page/edit/?id={$doc->id}'>Edit: {$doc->title}</a>
					</div>";
			}

			// Children
			if($doc->children->count()) {
				$out .= "<ul class='cbp-ntsubaccordion'>";

				foreach($doc->children as $child) {
					$out .= "<li>
								<h4 class='cbp-nttrigger'>{$child->title}</h4>
								<div class='cbp-ntcontent'>
									{$child->body}";

					if($user->hasRole('superuser')) {
						$out .=
						"<div style='float:right;font-size:11px;'>
							<a href='{$config->urls->admin}page/edit/?id={$child->id}'>Edit: {$child->title}</a>
						</div>";
					}

					$out .= "</div></li>";
				}

				$out .= "</ul>";
			}

			$out .= "</div></li>";
		}

		$out .= '</ul>';

		// New Doc button
		if($user->hasRole('superuser')) {
			$out .= "<div style='float:right;font-size:13px;'>
				<a href='{$config->urls->admin}page/add/?parent_id={$docsRootID}'>
					<button class='ui-button ui-widget ui-corner-all head_button_clone ui-state-default' name='button' value='Add New' type='button'>
					<span class='ui-button-text'><i class='fa fa-plus-circle'></i> Add New Doc</span></button>
				</a>
			</div>";
		}


		$out .= '</div><!-- /docs -->';

		$out .= "
			<script>
				$( function() {
					$( '#cbp-ntaccordion' ).cbpNTAccordion();
				});
			</script>";

		return $out;

	}


	/**
	 * Called only when your module is installed
	 *
	 * This version creates a new page with this Process module assigned.
	 *
	 */
	public function ___install() {

		// create the page our module will be assigned to
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::pageName;

		// installs to the admin "Setup" menu ... change as you see fit
		$page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
		$page->process = $this;

		// we will make the page title the same as our module title
		// but you can make it whatever you want
		//$info = self::getModuleInfo();
		//$page->title = $info['title'];
		$page->title = 'Docs';

		// save the page
		$page->save();

		// tell the user we created this page
		$this->message("Created Page: {$page->path}");
	}

	/**
	 * Called only when your module is uninstalled
	 *
	 * This should return the site to the same state it was in before the module was installed.
	 *
	 */
	public function ___uninstall() {

		// find the page we installed, locating it by the process field (which has the module ID)
		// it would probably be sufficient just to locate by name, but this is just to be extra sure.
		$moduleID = $this->modules->getModuleID($this);
		$page = $this->pages->get("template=admin, process=$moduleID, name=" . self::pageName);

		if($page->id) {
			// if we found the page, let the user know and delete it
			$this->message("Deleting Page: {$page->path}");
			$page->delete();
		}
	}

}
